{"version":3,"file":"static/js/938.9c62d834.chunk.js","mappings":"sPACA,EAA8B,yC,SC0C9B,EAtC4B,WAC1B,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAE+BC,EAAAA,EAAAA,gBAAoBN,GAFnD,UAIgC,KAFtBO,EAFV,QAIqBC,OAJrB,iDAOIJ,EAAWG,GAPf,gDASIE,QAAQC,IAAR,MATJ,0DADc,uBAAC,WAAD,wBAadC,EACD,GAAE,CAACX,KAGF,6BACGG,GACC,eAAIS,UAAWC,EAAf,SACGV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADE,OAQf,iEAIP,C,qDCrCKG,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCAeVC,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,MAAOC,EAArB,+BAA8B,MAA9B,SACDP,EAAS,aAAD,OAAcM,EAAd,YAAsBC,EAAtB,MADP,UAEA,OADlBC,EADkB,QAEXC,OAFW,yCAEYD,EAASE,KAAKC,SAF1B,2CAAH,qDAKjBC,EAAe,mCAAG,WAAMC,GAAN,uFACCb,EAAS,uBAAD,OAAwBa,IADjC,UAEE,OADlBL,EADgB,QAETC,OAFS,yCAEcD,EAASE,KAAKC,SAF5B,2CAAH,sDAKfG,EAAY,mCAAG,WAAMjB,GAAN,uFACIG,EAAS,UAAD,OAAWH,EAAX,MADZ,UAEK,OADlBW,EADa,QAENC,OAFM,yCAEiBD,EAASE,MAF1B,2CAAH,sDAKZK,EAAY,mCAAG,WAAMlB,GAAN,uFACIG,EAAS,UAAD,OAAWH,EAAX,cADZ,UAEK,OADlBW,EADa,QAENC,OAFM,yCAEiBD,EAASE,KAAKM,MAF/B,2CAAH,sDAKZC,EAAe,mCAAG,WAAMpB,GAAN,uFACCG,EAAS,UAAD,OAAWH,EAAX,cADT,UAEE,OADlBW,EADgB,QAETC,OAFS,yCAEcD,EAASE,KAAKC,SAF5B,2CAAH,sDAKfvB,EAAM,CACViB,kBAAAA,EACAO,gBAAAA,EACAE,aAAAA,EACAC,aAAAA,EACAE,gBAAAA,GAEF,K","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieDetailsReviews/MovieDetailsReviews.module.scss?2c8f","components/MovieDetailsReviews/MovieDetailsReviews.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsList\":\"MovieDetailsReviews_reviewsList__gWTAg\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../../services/api';\nimport styles from './MovieDetailsReviews.module.scss';\n\nconst MovieDetailsReviews = () => {\n  const { movieID } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        const movieReviews = await api.getMovieReviews(movieID);\n\n        if (movieReviews.length === 0) {\n          return;\n        }\n        setReviews(movieReviews);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getReviews();\n  }, [movieID]);\n\n  return (\n    <section>\n      {reviews ? (\n        <ul className={styles.reviewsList}>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>There are no reviews for this movie.</p>\n      )}\n    </section>\n  );\n};\n\nexport default MovieDetailsReviews;\n","import axios from 'axios';\n\nconst API_KEY = '431ab85139813dba3796c445694ce723';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n/**\n * Function for fetching tranding movies from TMDB (The movie data base) API.\n * @param {string=} [type=all] - Type of content. Allowed: all, movie, tv, person. Default = all\n * @param {string=[day]} [period=day] - Time window foe rating. Allowed: day, week. Default = day\n * @returns {Array.<object>} Array of selected content objects\n */\nconst getTrendingMovies = async (type = 'all', period = 'day') => {\n  const response = await instance(`/trending/${type}/${period}?`);\n  if (response.status === 200) return response.data.results;\n};\n\nconst getMovieByQuery = async query => {\n  const response = await instance(`/search/movie?query=${query}`);\n  if (response.status === 200) return response.data.results;\n};\n\nconst getMovieById = async id => {\n  const response = await instance(`/movie/${id}?`);\n  if (response.status === 200) return response.data;\n};\n\nconst getMovieCast = async id => {\n  const response = await instance(`/movie/${id}/credits?`);\n  if (response.status === 200) return response.data.cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await instance(`/movie/${id}/reviews?`);\n  if (response.status === 200) return response.data.results;\n};\n\nconst api = {\n  getTrendingMovies,\n  getMovieByQuery,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n};\nexport default api;\n"],"names":["movieID","useParams","useState","reviews","setReviews","useEffect","api","movieReviews","length","console","log","getReviews","className","styles","map","id","author","content","instance","axios","baseURL","params","api_key","getTrendingMovies","type","period","response","status","data","results","getMovieByQuery","query","getMovieById","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}