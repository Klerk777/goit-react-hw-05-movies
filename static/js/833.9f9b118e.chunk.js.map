{"version":3,"file":"static/js/833.9f9b118e.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MovieItem/MovieItem.module.scss?ba96","components/MoviesList/MovieItem/MovieItem.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.scss?709c","components/MoviesList/MoviesList.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.scss?5dd0","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ThreeDots\n      height=\"100\"\n      width=\"100\"\n      radius=\"9\"\n      color=\"#f1c40fed\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'relative',\n        top: '20px',\n      }}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MovieItem_title__Jgf85\",\"poster\":\"MovieItem_poster__IBPEs\"};","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport defaultPoster from '../../../images/defaultPoster.png';\nimport styles from './MovieItem.module.scss';\n\nconst MovieItem = ({ movies, location }) => {\n  return movies.map(({ id, poster_path, title, name }) => {\n    return (\n      <li key={id} className={styles.item}>\n        <Link to={`/movies/${id}`} state={{ from: location }}>\n          <div>\n            <img\n              className={styles.poster}\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                  : defaultPoster\n              }\n              alt={title ?? name}\n            />\n            <p className={styles.title}>{title ?? name}</p>\n          </div>\n        </Link>\n      </li>\n    );\n  });\n};\n\nexport default MovieItem;\n\nMovieItem.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  location: PropTypes.object,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__Ea3rL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieItem from './MovieItem/MovieItem';\nimport styles from './MoviesList.module.scss';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <>\n      <ul className={styles.list}>\n        <MovieItem movies={movies} location={location} />\n      </ul>\n    </>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  location: PropTypes.object,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__49W6b\"};","import { toast } from 'react-toastify';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SearchForm.module.scss';\n\nconst SearchForm = ({ onFormSubmit }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    if (inputValue.trim() === '') {\n      toast('Pleas, enter some query', {\n        icon: '‚ùî',\n      });\n      return;\n    } else {\n      onFormSubmit(inputValue);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleFormSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      <button>Search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MoviesList from '../../components/MoviesList/MoviesList';\nimport api from '../../services/api';\nimport Loader from 'components/Loader/Loader';\n\nexport const Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const searchQuery = searchParams.get('query');\n  const location = useLocation();\n\n  const handleFormSubmit = query => {\n    if (searchQuery === query) return;\n    setSearchParams({ query });\n    setMovies([]);\n  };\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    const getMovies = async () => {\n      try {\n        setIsLoading(true);\n        const receivedMovies = await api.getMovieByQuery(searchQuery);\n\n        if (receivedMovies.length < 1) {\n          toast.error(\n            `Unfortunately, nothing was found for your query - ${receivedMovies}`,\n            {\n              icon: 'üò¢',\n            }\n          );\n        }\n        setMovies(receivedMovies);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovies();\n  }, [searchQuery]);\n\n  return (\n    <main>\n      <SearchForm onFormSubmit={handleFormSubmit} />\n      {movies && <MoviesList movies={movies} location={location} />}\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '431ab85139813dba3796c445694ce723';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n/**\n * Function for fetching tranding movies from TMDB (The movie data base) API.\n * @param {string=} [type=all] - Type of content. Allowed: all, movie, tv, person. Default = all\n * @param {string=[day]} [period=day] - Time window foe rating. Allowed: day, week. Default = day\n * @returns {Array.<object>} Array of selected content objects\n */\nconst getTrendingMovies = async (type = 'all', period = 'day') => {\n  const response = await instance(`/trending/${type}/${period}?`);\n  if (response.status === 200) return response.data.results;\n};\n\nconst getMovieByQuery = async query => {\n  const response = await instance(`/search/movie?query=${query}`);\n  if (response.status === 200) return response.data.results;\n};\n\nconst getMovieById = async id => {\n  const response = await instance(`/movie/${id}?`);\n  if (response.status === 200) return response.data;\n};\n\nconst getMovieCast = async id => {\n  const response = await instance(`/movie/${id}/credits?`);\n  if (response.status === 200) return response.data.cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await instance(`/movie/${id}/reviews?`);\n  if (response.status === 200) return response.data.results;\n};\n\nconst api = {\n  getTrendingMovies,\n  getMovieByQuery,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n};\nexport default api;\n"],"names":["height","width","radius","color","ariaLabel","wrapperStyle","display","justifyContent","position","top","wrapperClassName","visible","movies","location","map","id","poster_path","title","name","className","styles","to","state","from","src","defaultPoster","alt","onFormSubmit","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","toast","icon","type","value","onChange","target","Movies","useSearchParams","searchParams","setSearchParams","setMovies","isLoading","setIsLoading","error","setError","searchQuery","get","useLocation","useEffect","getMovies","api","receivedMovies","length","message","query","MoviesList","Loader","instance","axios","baseURL","params","api_key","getTrendingMovies","period","response","status","data","results","getMovieByQuery","getMovieById","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}